version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.2-stretch-browsers

    working_directory: ~/AutoIntern-Django
    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
  test:
    docker:
      - image: circleci/python:3.6.2-stretch-browsers
    steps:
      #- checkout
      - run:
          name: Set Up GOOGLE_CLOUD_DEFAULT_CREDENTIALS
          command: |
            echo $DEV_SECRET | base64 -di > /tmp/dev_secret.json

      # TODO: Look into restore cache
      #- restore_cache:
      #    key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - run:
          name: run tests
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/dev_secret.json"
            . venv/bin/activate
            ./cloud_sql_proxy_linux -instances="$DEV_database"=tcp:5432 &
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports

  deployDev:
    machine:
      enabled: true
    working_directory: ~/AutoIntern-Django
    steps:
      - run:
          name: Deploy To Dev Server
          command: |
            gcloud -q app deploy dev_app.yaml --promote --version=1

  deployProd:
    machine:
      enabled: true
    working_directory: ~/AutoIntern-Django
    steps:
      - run:
          name: Deploy To Dev Server
          command: |
            gcloud config set project $GCLOUD_PROD_ID
            gcloud -q app deploy prod_app.yaml --promote --version=1

workflows:
  version: 2
  build-test-deployDev-approval-deployProd:
    jobs:
      - build
      - test:
          requires:
            - build
      - deployDev:
          requires:
            - test
      - hold:
          type: approval
          requires:
            - deployDev
      - deployProd:
          requires:
            - hold
